# Create your views here.
from django.shortcuts import render_to_response
from django.http import HttpResponse
from django.http import HttpResponseRedirect
from django.contrib import auth
from django.utils import simplejson
import os
from annotation import settings
import Image,ImageDraw
import StringIO
import random
from django.views.decorators.csrf import csrf_exempt
from django.contrib.auth.decorators import login_required
from markpic.models import Picture5K,KeyWord5K,Student,Log5k
from django.contrib.auth.forms import UserCreationForm
from django.template import RequestContext
from django.contrib.auth import *
from django.core.paginator import Paginator
from django.template import loader
class picture:
        def __init__(self):
                self.id=0        
                self.name=''
                self.src=''

def wordtoanother(key):
        index=key.keyid-1
        linelist=[]
        for line in open("WordsRelation"):
                line=line[:-1]
                linelist.append(line)
        wordslist=linelist[index]
        wordslist=wordslist.split()
        indexlist=[]
        
        wordslist.pop(index)
        index=wordslist.index(max(wordslist))
        indexlist.append(index)
        
        wordslist.pop(index)
        index=wordslist.index(max(wordslist))
        indexlist.append(index)

        wordslist.pop(index)
        index=wordslist.index(max(wordslist))
        indexlist.append(index)
        return indexlist

def genePicName():
        picid=random.randint(0,4500)
        piclist=KeyWord5K.objects.filter(pictures=picid)
        if piclist:
                pic=random.choice(piclist)
                return pic.keyname
        else:
                return 'city'
        
def querypic(word):
        keylist=KeyWord5K.objects.filter(keyname=word)
        if keylist:
                key=keylist[0]
                piclist=[]
                picturelist=[]
                picturelist.extend(random.sample(key.pictures.all(),min(len(key.pictures.all()),5)))
                indexlist=wordtoanother(key)
                for index in indexlist:
                        id=index+1
                        key=KeyWord5K.objects.get(keyid=id)
                        picturelist.extend(random.sample(key.pictures.all(),min(len(key.pictures.all()),5)))
                for pic in picturelist:
                        ownpic=picture()
                        ownpic.id=pic.picid
                        ownpic.name=pic.picname
                        ownpic.src=pic.picpath
                        piclist.append(ownpic)                
                return piclist
        else:
                return []
        
def querykeyid(word):
        keylist=KeyWord5K.objects.filter(keyname=word)
        if keylist:
                key=keylist[0]
                return key.keyid
        else:
                return -1
        
@csrf_exempt
def home(request):
        return render_to_response('login.html')

@login_required
def loggedin(request):
#        process5k(request)
        return render_to_response('select.html')

def processcorel30k(request):
        return render_to_response('base.html')

def custom_proc(request):
        picname=genePicName()
        keyid=querykeyid(picname)
        piclist=querypic(picname)
	#convertpath(piclist)
        return {
                'picture_list':piclist,
                'keyid':keyid,
                'keyword':picname,
                'user':request.user
                }

@login_required
def process5k(request):
        c=RequestContext(request, {'keyid':1},processors=[custom_proc])
        return render_to_response('index.html',context_instance=RequestContext(request,processors=[custom_proc]))

def processLableMe(request):
        return render_to_response('LableMe.html')

def LableMeAnnotation(request):
        if request.is_ajax():
                message="Hello Ajax"
                return HttpResponse(request.POST)
        return render_to_response('LableMe.html')

def search(request):
        if 'word' in request.GET:
                keyid=querykeyid(request.GET['word'])
                piclist=querypic(request.GET['word'])
                if not piclist:
                        return render_to_response('index.html',{'picture_list':piclist,'keyid':keyid,'keyword':request.GET['word'],'information':'No result for you search'})
        	return render_to_response('index.html',{'picture_list':piclist,'keyid':keyid,'keyword':request.GET['word']})
        else:
                message='You searched nothing'
        return HttpResponse(message)

def register(request):
        if request.method=='POST':
                form=UserCreationForm(request.POST)
                if form.is_valid():
                        new_user=form.save()
                        return HttpResponseRedirect("/")
        else:
                form=UserCreationForm()
        c={'form':form}
        return render_to_response("registration/register.html",c,context_instance=RequestContext(request))

#@csrf_exempt
#def login_view(request):
#        if request.method=='POST':
#        	studentid=request.POST['studentid']
#                password=request.POST['password']
#                student=Student.objects.get(studentid=studentid)
#                if student.password==password:
#                        return HttpResponseRedirect("/account/loggedin/")
#                else:
#                        return HttpResponseRedirect("/account/invalid/")
@csrf_exempt
def login_view(request):
        if request.method=='POST':
        	studentid=request.POST['studentid']
                password=request.POST['password']
                user=authenticate(username=studentid,password=password)
                if user is not None:
                        login(request,user)
                        return HttpResponseRedirect("/5k")
                else:
                        return HttpResponseRedirect("/account/invalid/")
                        
                         
def logout_view(request):
        logout(request)
        return render_to_response('login.html')


@login_required
def process(request):
        valuelist=[]
	if request.is_ajax() and request.method=='POST':
                json_data=simplejson.loads(request.raw_post_data)
                picids=json_data['picids']
                wordid=json_data['wordid']
                studentid=json_data['studentid']
                for picid in picids:
                        log=Log5k(picid=picid,keyid=wordid,studentid=studentid)
                        log.save()
		
                return HttpResponseRedirect("/5k")
		

			

	
